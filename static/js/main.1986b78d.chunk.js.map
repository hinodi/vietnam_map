{"version":3,"sources":["MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["province","chartData","MapChart","setTooltipContent","listVisited","onToggleItem","getGeoBackgroundColor","index","city","find","e","id","visited","getGeoBackgroundHoverColor","data-tip","projection","projectionConfig","scale","center","style","width","height","map","geoUrl","geography","geographies","geo","centroid","geoCentroid","provinceIndex","rsmKey","split","pop","offset","x","y","code","codeForIsLand","properties","coordinates","fontSize","textAnchor","toString","name","onMouseEnter","onMouseLeave","onMouseDownCapture","default","fill","stroke","strokeWidth","outline","hover","App","useState","content","setContent","setListVisited","useEffect","dataString","localStorage","getItem","data","JSON","parse","listVisitedClone","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1986b78d.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoCentroid } from \"d3-geo\";\n\nimport \"./App.css\";\n// import province from \"./chartData/province.json\";\n\nconst province = [];\n\nconst chartData = [\n  \"https://gist.githubusercontent.com/hinodi/611bfc7208232be11ee994bc4f07e625/raw/70029a9134b3a49a653d86ea812bbca5d391e0ee/vietnam_map.json\",\n  \"https://gist.githubusercontent.com/hinodi/611bfc7208232be11ee994bc4f07e625/raw/a6c87ab52e94d2bad690fb79a9e158b195bbc394/hoangsa_map.json\",\n  \"https://gist.githubusercontent.com/hinodi/611bfc7208232be11ee994bc4f07e625/raw/a6c87ab52e94d2bad690fb79a9e158b195bbc394/truongsa_map.json\",\n];\n\nconst MapChart = ({ setTooltipContent, listVisited, onToggleItem }) => {\n  const getGeoBackgroundColor = (index) => {\n    const data = province.find((e) => e.id === index);\n    const { city } = data || {};\n\n    if (listVisited[index] && listVisited[index].visited) return \"#00ff0030\";\n\n    if (city) return \"#ff000030\";\n\n    return \"#00000010\";\n  };\n  const getGeoBackgroundHoverColor = (index) => {\n    const data = province.find((e) => e.id === index);\n    const { city } = data || {};\n\n    if (listVisited[index] && listVisited[index].visited) return \"#00ff0050\";\n\n    if (city) return \"#ff000050\";\n\n    return \"#00000050\";\n  };\n\n  return (\n    <ComposableMap\n      data-tip=\"\"\n      projection=\"geoMercator\"\n      projectionConfig={{\n        scale: 1000,\n        center: [105, 15],\n      }}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <ZoomableGroup>\n        {chartData.map((geoUrl, index) => (\n          <Geographies key={index.toString()} geography={geoUrl}>\n            {({ geographies }) => (\n              <>\n                {geographies.map((geo, index) => {\n                  const centroid = geoCentroid(geo);\n                  const provinceIndex = geo.rsmKey.split(\"-\").pop();\n                  const data = province.find((e) => e.id === provinceIndex);\n\n                  const { offset: { x, y } = {}, code = \"\" } = data || {};\n                  const codeForIsLand = geo?.properties?.code;\n\n                  return (\n                    <g key={index.toString()}>\n                      <Marker coordinates={centroid}>\n                        <text x={x} y={y} fontSize={3} textAnchor=\"middle\">\n                          {codeForIsLand || code}\n                        </text>\n                      </Marker>\n                    </g>\n                  );\n                })}\n                {geographies.map((geo, index) => {\n                  const provinceIndex = geo.rsmKey.split(\"-\").pop();\n                  const data = province.find((e) => e.id === provinceIndex);\n                  const { name } = data || {};\n\n                  return (\n                    <Geography\n                      key={index.toString()}\n                      geography={geo}\n                      onMouseEnter={() => setTooltipContent(name)}\n                      onMouseLeave={() => setTooltipContent(\"\")}\n                      onMouseDownCapture={() => onToggleItem(provinceIndex)}\n                      style={{\n                        default: {\n                          fill: getGeoBackgroundColor(provinceIndex),\n                          stroke: \"#212529\",\n                          strokeWidth: 0.2,\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: getGeoBackgroundHoverColor(provinceIndex),\n                          stroke: \"#212529\",\n                          strokeWidth: 0.8,\n                          outline: \"none\",\n                        },\n                      }}\n                    />\n                  );\n                })}\n              </>\n            )}\n          </Geographies>\n        ))}\n      </ZoomableGroup>\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","import React, { useEffect, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport MapChart from \"./MapChart\";\n\nconst App = () => {\n  const [content, setContent] = useState(\"\");\n  const [listVisited, setListVisited] = useState({});\n\n  useEffect(() => {\n    const dataString = localStorage.getItem(\"listVisited\");\n    const data = JSON.parse(dataString);\n\n    setListVisited(data);\n  }, []);\n\n  const onToggleItem = (index) => {\n    const listVisitedClone = { ...listVisited };\n    if (listVisitedClone[index]) {\n      listVisitedClone[index].visited = false;\n    } else {\n      listVisitedClone[index] = { visited: true };\n    }\n\n    setListVisited(listVisitedClone);\n    localStorage.setItem(\"listVisited\", JSON.stringify(listVisitedClone));\n  };\n\n  return (\n    <>\n      <MapChart\n        setTooltipContent={setContent}\n        listVisited={listVisited}\n        onToggleItem={onToggleItem}\n      />\n      <ReactTooltip>{content}</ReactTooltip>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}